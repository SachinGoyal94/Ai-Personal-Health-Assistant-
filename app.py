# -*- coding: utf-8 -*-
"""medical assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18AGmw2a0VommBiv4ZuOu-s5WXm5BtiMX
"""
import gradio as gr
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import NearestNeighbors
from geopy.geocoders import Nominatim
import requests
import random

# -------- Sleep Quality Predictor --------
def predict_sleep_quality(sleep_duration, heart_rate, activity_level):
    df = pd.read_csv("Sleep_health_and_lifestyle_dataset.csv")
    df.dropna(subset=['Sleep Duration', 'Heart Rate', 'Physical Activity Level', 'Quality of Sleep'], inplace=True)

    y = df['Quality of Sleep']
    X = df[['Sleep Duration', 'Heart Rate', 'Physical Activity Level']]
    model = RandomForestClassifier()
    model.fit(X, y)

    prediction = model.predict([[sleep_duration, heart_rate, activity_level]])[0]

    advice = ""
    if sleep_duration < 5:
        advice += "⚠ Your sleep duration is low. Aim for 7–9 hours.\n"
    if heart_rate > 100:
        advice += "❤ High heart rate. Consider stress reduction or hydration.\n"
    elif heart_rate < 50:
        advice += "💤 Low heart rate. Monitor for fatigue or consult a doctor.\n"
    if activity_level < 30:
        advice += "🏃 Low physical activity. Try to be more active daily.\n"

    return f"🌙 *Predicted Sleep Quality:* {prediction}\n\n{advice or '✅ All inputs are within healthy range!'}"

# -------- Disease Predictor --------
def predict_disease(symptoms):
    if not symptoms:
        return "⚠ Please enter symptoms.", ""

    try:
        disease_df = pd.read_csv('Disease_symptom_and_patient_profile_dataset.csv', encoding='latin1')
    except Exception as e:
        return f"⚠ Dataset Error: {str(e)}", ""

    symptom_cols = ['Fever', 'Cough', 'Fatigue', 'Difficulty Breathing']
    disease_col = 'Disease'
    user_symptoms = [s.strip().lower() for s in symptoms.split(',')]

    symptom_mask = pd.Series(False, index=disease_df.index)
    for symptom in user_symptoms:
        if symptom in map(str.lower, symptom_cols):
            col_name = [col for col in symptom_cols if col.lower() == symptom][0]
            symptom_mask |= (disease_df[col_name] == 'Yes')

    matching_diseases = disease_df[symptom_mask][disease_col].unique()

    if not len(matching_diseases):
        return "⚠ No matches found. Check symptom spelling or try different terms.", ""

    output = "### 🩺 Disease Risk Assessment\n"
    predicted_disease = matching_diseases[0]

    for disease in matching_diseases:
        base_risk = min(len(user_symptoms) * 15 + random.randint(5, 20), 95)
        output += f"- *{disease}*: {base_risk}% likelihood\n"

    output += "\n*Note: This is a probabilistic estimate, not a medical diagnosis.*"

    return output, predicted_disease

# -------- Doctor Finder (Simple) --------
def find_doctors(disease, location):
    import time

    if not disease or not location:
        return "⚠ Please provide both disease and location."

    try:
        geolocator = Nominatim(user_agent="simple_health_app")
        loc = geolocator.geocode(location)

        if not loc:
            return "⚠ Unable to find that location. Please try another city or area."

        query = "doctor"  # generalized search term
        search_params = {
            'q': query,
            'format': 'json',
            'limit': 5,
            'viewbox': f"{loc.longitude - 0.1},{loc.latitude + 0.1},{loc.longitude + 0.1},{loc.latitude - 0.1}",
            'bounded': 1
        }
        headers = {'User-Agent': 'simple_health_app'}

        response = requests.get("https://nominatim.openstreetmap.org/search", params=search_params, headers=headers)

        # Retry once if 503
        if response.status_code == 503:
            time.sleep(1)
            response = requests.get("https://nominatim.openstreetmap.org/search", params=search_params, headers=headers)

        if response.status_code != 200:
            return f"⚠ Failed to get data. Status code: {response.status_code}"

        results = response.json()

        if not results:
            return "⚠ No doctors found nearby. Try a different or larger location."

        result_text = "### 🧑‍⚕️ Nearby Doctors:\n"
        for item in results:
            name = item.get('display_name', 'Unknown')
            result_text += f"- {name}\n"

        return result_text

    except Exception as e:
        return f"⚠ Error: {str(e)}"



# -------- Nutrition Recommender --------
def nutrition_recommendation(calories, carbs, protein, fat):
    nutri_df = pd.read_csv("nutrition.csv")
    for col in ['calories', 'carbohydrate', 'protein', 'fat']:
        nutri_df[col] = nutri_df[col].astype(str).str.replace('g', '').str.strip()
        nutri_df[col] = pd.to_numeric(nutri_df[col], errors='coerce')

    nutri_df.dropna(subset=['calories', 'carbohydrate', 'protein', 'fat'], inplace=True)
    if nutri_df.empty:
        return "⚠ No valid food data available."

    feat = nutri_df[['calories', 'carbohydrate', 'protein', 'fat']]
    scaler_n = StandardScaler().fit(feat)
    scaled_feat = scaler_n.transform(feat)
    knn = NearestNeighbors(n_neighbors=10).fit(scaled_feat)

    user_input = [[calories, carbs, protein, fat]]
    scaled_user_input = scaler_n.transform(user_input)

    distances, indices = knn.kneighbors(scaled_user_input)
    result = "### 🍽 Top 10 Food Recommendations:\n"

    for i, idx in enumerate(indices[0]):
        row = nutri_df.iloc[idx]
        result += f"\n*{i + 1}. {row['name']}*\n"
        result += f"   - Calories: {row['calories']}\n"
        result += f"   - Carbs: {row['carbohydrate']}g\n"
        result += f"   - Protein: {row['protein']}g\n"
        result += f"   - Fat: {row['fat']}g\n"

    return result

# -------- Gradio UI --------
def create_ui():
    custom_css = """
    /* FADE IN BLOCKS */
    .gr-block {
        animation: fadein 0.6s ease-in-out;
    }
    @keyframes fadein {
        from { opacity: 0; transform: translateY(12px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* BUTTON STYLING */
    .gr-button {
        transition: all 0.3s ease;
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        color: white;
        border-radius: 10px;
        padding: 10px 16px;
        font-weight: bold;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .gr-button:hover {
        transform: scale(1.05);
        background: linear-gradient(135deg, #66BB6A, #388E3C);
        box-shadow: 0 6px 10px rgba(0,0,0,0.15);
    }

    /* CARD-STYLE OUTPUTS */
    .gr-markdown {
        background-color: #ffffff;
        padding: 16px;
        border-radius: 16px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .gr-markdown:hover {
        transform: scale(1.01);
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
    }

    /* INPUT FIELD HIGHLIGHTING */
    .gr-textbox:hover, .gr-number:hover, .gr-slider:hover {
        box-shadow: 0 0 6px rgba(76, 175, 80, 0.5);
        transition: box-shadow 0.2s ease;
        border-radius: 10px !important;
    }

    /* TABS HIGHLIGHT */
    .gr-tab:hover {
        color: #2E7D32 !important;
        font-weight: 600;
        text-decoration: underline;
        cursor: pointer;
    }

    /* ICON ANIMATION ON HOVER */
    .gr-button span:hover {
        animation: icon-bounce 0.6s ease;
    }
    @keyframes icon-bounce {
        0% { transform: translateY(0); }
        30% { transform: translateY(-5px); }
        60% { transform: translateY(2px); }
        100% { transform: translateY(0); }
    }

    /* HEADER STYLES */
    #header {
        font-size: 30px;
        font-weight: bold;
        color: #388E3C;
        text-align: center;
        padding-bottom: 10px;
    }
    """

    with gr.Blocks(css=custom_css) as demo:
        gr.Markdown("## 🧠 <span style='color:#388E3C'>AI Medical Assistant</span>", elem_id="header")
        gr.Markdown("Welcome! Select a health tool below. All features are 💯 free and private.")

        with gr.Tabs():
            with gr.Tab("🛌 Sleep Quality Predictor"):
                with gr.Row():
                    with gr.Column():
                        sd = gr.Slider(0, 12, label="🕒 Sleep Duration (hours)", interactive=True)
                        hr = gr.Number(label="❤️ Heart Rate (bpm)", interactive=True)
                        act = gr.Slider(0, 500, step=10, label="🏃 Activity Level (minutes)", interactive=True)
                        btn1 = gr.Button("🧪 Predict Sleep Quality")
                    with gr.Column():
                        sleep_out = gr.Markdown("### ⏳ Sleep Prediction Will Appear Here")
                btn1.click(predict_sleep_quality, [sd, hr, act], sleep_out)

            with gr.Tab("🩺 Disease Risk Estimator"):
                with gr.Row():
                    with gr.Column():
                        symptoms = gr.Textbox(label="💬 Symptoms (comma-separated)")
                        location = gr.Textbox(label="🌍 Your Location (e.g., Delhi, NYC)")
                        btn2 = gr.Button("🧬 Analyze Risk")
                        predicted_disease = gr.State()
                        disease_out = gr.Markdown("### 🧪 Disease Risk Will Appear Here")
                        btn2.click(predict_disease, [symptoms], [disease_out, predicted_disease])

                        btn3 = gr.Button("🧑‍⚕️ Find Nearby Doctors")
                        doctor_out = gr.Markdown("### 🏥 Doctor Info Will Appear Here")
                        btn3.click(find_doctors, [predicted_disease, location], doctor_out)

            with gr.Tab("🥗 Nutrition Recommender"):
                with gr.Row():
                    with gr.Column():
                        cal = gr.Number(label="🔥 Target Calories")
                        carb = gr.Number(label="🥔 Carbohydrates (g)")
                        prot = gr.Number(label="🍗 Protein (g)")
                        fat = gr.Number(label="🧈 Fat (g)")
                        btn4 = gr.Button("🍽 Recommend Foods")
                    with gr.Column():
                        nutr_out = gr.Markdown("### 🧾 Food Suggestions Will Appear Here")
                btn4.click(nutrition_recommendation, [cal, carb, prot, fat], nutr_out)

        gr.Markdown("---")
        gr.Markdown("<div style='text-align: center;'>Made with ❤️ using <b>Gradio</b> and <b>Python</b></div>")

    return demo

app = create_ui()
app.launch(server_name="0.0.0.0", server_port=7860)
